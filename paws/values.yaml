
dbProxy: 
  hmacKey: "9a33d49db4bb823e87187a11e4f6296bee41bc35c41dc195634dff440c1870f0"
  image: 
    name: quay.io/wikimedia-paws-prod/db-proxy
    tag: multiinstance
    # dbProxy.image.template safely defines image:tag name in yaml
    template: "{{ .Values.dbProxy.image.name}}:{{.Values.dbProxy.image.tag }}"
# pawsPublicEnabled enables the anonymous viewing service for notebooks
pawsPublicEnabled: true
pawspublic:
  nbserve:
    image:
      name: quay.io/wikimedia-paws-prod/nbserve
      tag: latest
      # pawspublic.nbserve.image.template safely defines image:tag name in yaml
      template: "{{ .Values.pawspublic.nbserve.image.name}}:{{.Values.pawspublic.nbserve.image.tag }}"
    replicas: 1
  renderer:
    image:
      name: docker-registry.tools.wmflabs.org/toolforge-paws-public-renderer
      tag: latest
      # pawspublic.nbserve.image.template safely defines image:tag name in yaml
      template: "{{ .Values.pawspublic.renderer.image.name}}:{{.Values.pawspublic.renderer.image.tag }}"
    replicas: 1
  ingress:
    host: public.paws.wmcloud.org
    legacyHost: paws-public.wmflabs.org
paws:
  # frontPageEnabled switches the URL path of / to a redirect to paws.ingress.frontRedirect
  frontPageEnabled: true
  ingress:
    legacyHost: paws.wmflabs.org
    # paws.ingress.frontHost should be the domain the URL path of / uses to redirect to docs
    frontHost: paws.wmcloud.org
    # paws.ingress.frontRedirect should be the destination for URL path of / at paws.ingress.frontHost
    frontRedirect: https://wikitech.wikimedia.org/wiki/PAWS
deployHook:
  # deployHook.enabled determines if we are running hte deployhook or not
  enabled: False
  host: deploy-hook.paws.wmcloud.org
  # serviceAccount is the account that has the privileges to deploy PAWS
  serviceAccount: deploy
  # deployHook.tls controls using kube-lego or cert-manager for tls
  tls: false
  # deployHook.token makes it work. Provide a real on if deploying on Cloud VPS
  token: b590f591d1101844c5b40d0e62f53f02f5b27da1a2272422cc86729a5dceb074
  image:
    name: quay.io/wikimedia-paws-prod/deploy-hook
    tag: latest
    # deployHook.image.template safely defines image:tag name in yaml
    template: "{{ .Values.deployHook.image.name }}:{{ .Values.deployHook.image.tag }}"
  # service: 
  #   ports:
  #     nodePort: 32612
  #   type: NodePort
  service:
    type: ClusterIP
jupyterhub:
  proxy:
    # jupyterhub.proxy.secretToken is a valid dummy value for development
    secretToken: "23f542cc4b1af000e68088f1acc7ca8275a67cf496bae15ead6a79b8c6702597"
    service: 
      nodePorts: 
        http: 32611
      type: NodePort
  hub:
    config:
      Authenticator:
        admin_users:
        - Yuvipanda
        - BDavis_(WMF)
        - BStorm_(WMF)
        - ABorrero_(WMF)
        - HPham_(WMF)
        - NSkaggs_(WMF)
        - Andrewbogott
        - Chicocvenancio
        - Zhuyifei1999
      JupyterHub:
        authenticator_class: mediawiki
    db:
      # jupyterhub.hub.db values are overridden in Cloud VPS
      url: sqlite://
      type: sqlite-memory
      upgrade: true
    extraVolumes:
    - name: homes
      hostPath:
        path: /data/project
    - name: dumps
      hostPath:
        path: /public/dumps
    # Without this, dumps becomes inaccessible and can hang the host
    - name: dumps-src1
      hostPath:
        path: /mnt/nfs/dumps-labstore1007.wikimedia.org
        type: DirectoryOrCreate
    - name: dumps-src2
      hostPath:
        path: /mnt/nfs/dumps-labstore1006.wikimedia.org
        type: DirectoryOrCreate
    extraVolumeMounts:
    - name: homes
      mountPath: /data/project
    - name: dumps
      mountPath: /public/dumps
      readOnly: true
    - name: dumps-src1
      mountPath: /mnt/nfs/dumps-labstore1007.wikimedia.org
      readOnly: true
    - name: dumps-src2
      mountPath: /mnt/nfs/dumps-labstore1006.wikimedia.org
      readOnly: true
    extraConfig: 
      myConfig: |
          import hmac
          import hashlib
          import subprocess
          import os
          from oauthenticator.mediawiki import MWOAuthenticator
          from tornado import gen
          
          class Auth(MWOAuthenticator):
              enable_auth_state = True
              def normalize_username(self, username):
                  return username
          
              @gen.coroutine
              def pre_spawn_start(self, user, spawner):
                  auth_state = yield user.get_auth_state()
                  identity = auth_state['MEDIAWIKI_USER_IDENTITY']
                  spawner.environment['ACCESS_KEY'] = auth_state['ACCESS_TOKEN_KEY']
                  spawner.environment['ACCESS_SECRET'] = auth_state['ACCESS_TOKEN_SECRET']
                  spawner.environment['CLIENT_ID'] = self.client_id
                  spawner.environment['CLIENT_SECRET'] = self.client_secret
                  spawner.environment['USER'] = identity['username']
                  # Set rather than use .extend!
                  # Since otherwise the volumes list will grow each time
                  # the spawner stops and starts!
                  homedir = '/data/project/paws/userhomes/{}'.format(identity['sub'])
                  # Create the homedir so docker doesn't do it as root
                  os.makedirs(homedir, mode=0o755, exist_ok=True)
                  spawner.volumes = [
                      {
                          'name': 'home',
                          'hostPath': { 'path': homedir }
                      },
                      {
                          'name': 'dumps',
                          'hostPath': { 'path': '/public/dumps' }
                      },
                      {
                          'name': 'dumps-src1',
                          'hostPath': { 'path': '/mnt/nfs/dumps-labstore1007.wikimedia.org' }
                      },
                      {
                          'name': 'dumps-src2',
                          'hostPath': { 'path': '/mnt/nfs/dumps-labstore1006.wikimedia.org' }
                      }
                  ]
                  spawner.volume_mounts = [
                      {
                          'name': 'home',
                          'mountPath': '/home/paws'
                      },
                      {
                          'name': 'dumps',
                          'mountPath': '/public/dumps',
                          'readOnly': True
                      },
                      {
                          'name': 'dumps-src1',
                          'mountPath': '/mnt/nfs/dumps-labstore1007.wikimedia.org',
                          'readOnly': True

                      },
                      {
                          'name': 'dumps-src2',
                          'mountPath': '/mnt/nfs/dumps-labstore1006.wikimedia.org',
                          'readOnly': True

                      },
                  ]
          
                  spawner.environment['MYSQL_HOST'] = os.environ['MYSQL_SERVICE_HOST']
                  mysql_password = hmac.new(
                      os.environ['MYSQL_HMAC_KEY'].encode('utf-8'),
                      identity['username'].encode('utf-8'),
                      hashlib.sha256
                  ).hexdigest()
                  spawner.environment['MYSQL_USERNAME'] = identity['username']
                  spawner.environment['MYSQL_PASSWORD'] = mysql_password
     
          c.JupyterHub.authenticator_class = Auth
          c.JupyterHub.authenticate_prometheus = False
          c.JupyterHub.logo_file = '/srv/jupyterhub/PAWS.svg'
          c.JupyterHub.template_vars = {
              'announcement': (
                '<span class="alert-success">'
                'The new DB replicas are acessible in PAWS. Please '
                '<a href="//wikitech.wikimedia.org/wiki/News/Wiki_Replicas_2020_Redesign#How_should_I_connect_to_databases_in_PAWS%3F">'
                'test the connection</a> on your notebooks and '
                '<a href="//phabricator.wikimedia.org/T276284#reply">'
                'report any issues on Phabricator </a></span>')}
    extraEnv: 
      USER: tools.paws
      JUPYTERHUB_CRYPT_KEY: "4849a4d92a49cdf9a80b49486293e29966c4f02daefa0f5597cf14546bab09f8"
      MYSQL_HMAC_KEY: "9a33d49db4bb823e87187a11e4f6296bee41bc35c41dc195634dff440c1870f0"
    cookieSecret: 827902ad187337f83adc565dadfb4c095ce1962442aae043ac78948f9b216a8f
    fsGid: 52771
    image:
      name: quay.io/wikimedia-paws-prod/paws-hub
      tag: latest
    containerSecurityContext:
      runAsUser: 52771
  ingress: 
    enabled: true
    hosts:
      - hub.paws.local
  # We are not on an autoscaling cluster, so we don't want this
  scheduling:
    userScheduler:
      enabled: false
  singleuser:
    fsGid: 52771
    image:
      name: quay.io/wikimedia-paws-prod/singleuser
      tag: latest
      pullPolicy: Always
    memory:
      guarantee: 1G
      limit: 3G
    cpu:
      guarantee: .5
      limit: 1
    storage: 
      type: none
    uid: 52771
    # This must be false or this whole thing cannot work with restrictive PSP
    cloudMetadata:
      blockWithIptables: false
    lifecycleHooks:
      postStart:
        exec:
          command: ["sh", "-c", "cd /srv/paws/pwb && git pull origin stable || exit 0"]
# mysql configures the wiki replica backend variables
mysql:
  domain: "svc.cluster.local"
  username: s52771
  password: "iAmNotSecret0"
# If not deployed for prod use, we use the Bitnami mediawiki chart for testing
mediawikiHacks:
  image:
    name: quay.io/wikimedia-paws-prod/jobber
    tag: latest
    # mediawikiHacks.image.template safely defines image:tag name in yaml
    template: "{{ .Values.mediawikiHacks.image.name}}:{{.Values.mediawikiHacks.image.tag }}"
mediawiki:
  enabled: true
  fullnameOverride: pawswiki
  mediawikiHost: mediawiki.local
  mediawikiUser: TheAdmin
  mediawikiPassword: 59202f7c94f01de9200f7a920193e8
  mariadb:
    rootUser:
      password: 06f75c9e5cf56c9a74f16f3726e29b
    db:
      name: enwiki_p
      user: s52771
      password: iAmNotSecret0
  service:
    type: NodePort
  ingress:
    enabled: true
    hostname: wiki.mediawiki.local
